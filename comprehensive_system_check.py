#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã ML Community Platform
"""
import os
import sys
import json
import subprocess
from pathlib import Path
import re

def print_header(title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def print_success(message):
    """–ü–µ—á–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"‚úÖ {message}")

def print_error(message):
    """–ü–µ—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    print(f"‚ùå {message}")

def print_warning(message):
    """–ü–µ—á–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    print(f"‚ö†Ô∏è {message}")

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print_header("–ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í")
    
    required_structure = {
        "backend/": [
            "app/",
            "app/main.py",
            "app/core/",
            "app/core/config.py",
            "app/core/database.py", 
            "app/core/security.py",
            "app/models/",
            "app/models/__init__.py",
            "app/schemas/",
            "app/schemas/user.py",
            "app/schemas/hero.py",
            "app/schemas/guide.py",
            "app/schemas/news.py",
            "app/crud/",
            "app/crud/user.py",
            "app/crud/hero.py",
            "app/crud/guide.py",
            "app/crud/news.py",
            "app/api/",
            "app/api/v1/",
            "app/api/v1/auth.py",
            "app/api/v1/heroes.py",
            "app/api/v1/guides.py",
            "app/api/v1/users.py",
            "app/api/v1/news.py",
            "app/api/v1/search.py",
            "requirements.txt",
            "alembic.ini",
            "alembic/env.py",
            "alembic/versions/001_initial.py"
        ],
        "frontend/": [
            "src/",
            "src/App.tsx",
            "src/index.tsx",
            "src/components/",
            "src/components/Layout/Layout.tsx",
            "src/components/Hero/HeroCard.tsx",
            "src/components/Guide/GuideCard.tsx",
            "src/components/News/NewsCard.tsx",
            "src/components/Search/SearchModal.tsx",
            "src/pages/",
            "src/pages/HomePage.tsx",
            "src/pages/LoginPage.tsx",
            "src/services/",
            "src/services/api.ts",
            "src/services/auth.tsx",
            "src/types/",
            "src/types/index.ts",
            "package.json",
            "tsconfig.json",
            "tailwind.config.js"
        ],
        "installer/": [
            "app.py",
            "server_setup.py",
            "run_installer.py",
            "requirements.txt",
            "templates/",
            "templates/base.html",
            "templates/index.html",
            "templates/step1_requirements.html",
            "templates/step2_database.html",
            "templates/step3_redis.html",
            "templates/step4_admin.html",
            "templates/step5_import.html",
            "templates/step6_complete.html"
        ]
    }
    
    missing_files = []
    for directory, files in required_structure.items():
        for file_path in files:
            full_path = Path(directory) / file_path
            if not full_path.exists():
                missing_files.append(str(full_path))
    
    if missing_files:
        print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {len(missing_files)}")
        for file_path in missing_files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            print(f"  - {file_path}")
        if len(missing_files) > 10:
            print(f"  ... –∏ –µ—â–µ {len(missing_files) - 10} —Ñ–∞–π–ª–æ–≤")
        return False
    else:
        print_success("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

def check_python_syntax():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤"""
    print_header("–ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê PYTHON")
    
    backend_path = Path("backend")
    python_files = list(backend_path.rglob("*.py"))
    
    errors = []
    for file_path in python_files:
        try:
            result = subprocess.run(
                [sys.executable, "-m", "py_compile", str(file_path)],
                capture_output=True,
                text=True
            )
            if result.returncode != 0:
                errors.append(f"{file_path}: {result.stderr}")
        except Exception as e:
            errors.append(f"{file_path}: {e}")
    
    if errors:
        print_error(f"–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {len(errors)}")
        for error in errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            print(f"  {error}")
        return False
    else:
        print_success("–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True

def check_imports_and_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
    backend_req = Path("backend/requirements.txt")
    if backend_req.exists():
        with open(backend_req, 'r') as f:
            requirements = f.read()
        
        required_packages = [
            "fastapi", "uvicorn", "sqlalchemy", "alembic", 
            "psycopg2-binary", "redis", "python-jose", 
            "passlib", "python-multipart", "pydantic", 
            "python-dotenv", "httpx", "pytest"
        ]
        
        missing_packages = []
        for package in required_packages:
            if package not in requirements:
                missing_packages.append(package)
        
        if missing_packages:
            print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã –≤ requirements.txt: {', '.join(missing_packages)}")
            return False
        else:
            print_success("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã –≤ requirements.txt")
    else:
        print_error("–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
    frontend_package = Path("frontend/package.json")
    if frontend_package.exists():
        with open(frontend_package, 'r') as f:
            package_data = json.load(f)
        
        required_deps = [
            "react", "react-dom", "react-router-dom", "axios",
            "react-query", "react-hook-form", "react-hot-toast",
            "framer-motion", "lucide-react", "typescript"
        ]
        
        missing_deps = []
        for dep in required_deps:
            if dep not in package_data.get("dependencies", {}):
                missing_deps.append(dep)
        
        if missing_deps:
            print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ package.json: {', '.join(missing_deps)}")
            return False
        else:
            print_success("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ package.json")
    else:
        print_error("–§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return True

def check_database_models():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ï–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    
    models_file = Path("backend/app/models/__init__.py")
    if not models_file.exists():
        print_error("–§–∞–π–ª –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(models_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    required_classes = [
        "class User", "class Hero", "class BuildGuide", 
        "class News", "class Comment", "class GuideRating",
        "class HeroCounter", "class HeroSynergy", "class Item", "class Emblem"
    ]
    
    missing_classes = []
    for class_name in required_classes:
        if class_name not in content:
            missing_classes.append(class_name)
    
    if missing_classes:
        print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª–∞—Å—Å—ã –º–æ–¥–µ–ª–µ–π: {', '.join(missing_classes)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
    relationship_patterns = [
        r'relationship\("User"',
        r'relationship\("Hero"',
        r'relationship\("BuildGuide"',
        r'relationship\("News"'
    ]
    
    missing_relationships = []
    for pattern in relationship_patterns:
        if not re.search(pattern, content):
            missing_relationships.append(pattern)
    
    if missing_relationships:
        print_warning(f"–í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–≤—è–∑–∏: {len(missing_relationships)}")
    
    print_success("–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    return True

def check_api_endpoints():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print_header("–ü–†–û–í–ï–†–ö–ê API –≠–ù–î–ü–û–ò–ù–¢–û–í")
    
    api_files = [
        "backend/app/api/v1/auth.py",
        "backend/app/api/v1/heroes.py",
        "backend/app/api/v1/guides.py", 
        "backend/app/api/v1/users.py",
        "backend/app/api/v1/news.py",
        "backend/app/api/v1/search.py"
    ]
    
    missing_files = []
    for file_path in api_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã API: {', '.join(missing_files)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º main.py
    main_file = Path("backend/app/main.py")
    if not main_file.exists():
        print_error("–§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(main_file, 'r', encoding='utf-8') as f:
        main_content = f.read()
    
    expected_patterns = [
        r'@app\.get\("/api/health"\)',
        r'@app\.get\("/"\)',
        r'@app\.get\("/api/v1"\)',
        r'app\.include_router\(heroes\.router',
        r'app\.include_router\(guides\.router',
        r'app\.include_router\(users\.router',
        r'app\.include_router\(auth\.router',
        r'app\.include_router\(search\.router',
        r'app\.include_router\(news\.router'
    ]
    
    missing_patterns = []
    for pattern in expected_patterns:
        if not re.search(pattern, main_content):
            missing_patterns.append(pattern)
    
    if missing_patterns:
        print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ main.py: {len(missing_patterns)}")
        return False
    
    print_success("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    return True

def check_frontend_components():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print_header("–ü–†–û–í–ï–†–ö–ê FRONTEND –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    component_files = [
        "frontend/src/components/Layout/Layout.tsx",
        "frontend/src/components/Hero/HeroCard.tsx",
        "frontend/src/components/Guide/GuideCard.tsx",
        "frontend/src/components/News/NewsCard.tsx",
        "frontend/src/components/Search/SearchModal.tsx"
    ]
    
    missing_components = []
    for file_path in component_files:
        if not Path(file_path).exists():
            missing_components.append(file_path)
    
    if missing_components:
        print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(missing_components)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS —Ñ–∞–π–ª
    css_file = Path("frontend/src/components/components.css")
    if not css_file.exists():
        print_error("–§–∞–π–ª components.css –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
    types_file = Path("frontend/src/types/index.ts")
    if not types_file.exists():
        print_error("–§–∞–π–ª —Ç–∏–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(types_file, 'r', encoding='utf-8') as f:
        types_content = f.read()
    
    required_types = [
        "interface Hero", "interface User", "interface BuildGuide",
        "interface News", "interface AuthResponse", "interface LoginRequest"
    ]
    
    missing_types = []
    for type_name in required_types:
        if type_name not in types_content:
            missing_types.append(type_name)
    
    if missing_types:
        print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∏–ø—ã: {', '.join(missing_types)}")
        return False
    
    print_success("Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    return True

def check_installer():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞"""
    print_header("–ü–†–û–í–ï–†–ö–ê –£–°–¢–ê–ù–û–í–©–ò–ö–ê")
    
    installer_files = [
        "installer/app.py",
        "installer/server_setup.py", 
        "installer/run_installer.py",
        "installer/requirements.txt",
        "installer/quick_start.sh"
    ]
    
    missing_files = []
    for file_path in installer_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞: {', '.join(missing_files)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã
    template_files = [
        "installer/templates/base.html",
        "installer/templates/index.html",
        "installer/templates/step1_requirements.html",
        "installer/templates/step2_database.html",
        "installer/templates/step3_redis.html",
        "installer/templates/step4_admin.html",
        "installer/templates/step5_import.html",
        "installer/templates/step6_complete.html"
    ]
    
    missing_templates = []
    for file_path in template_files:
        if not Path(file_path).exists():
            missing_templates.append(file_path)
    
    if missing_templates:
        print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—ã: {', '.join(missing_templates)}")
        return False
    
    print_success("–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True

def check_security():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = Path("backend/app/core/config.py")
    if not config_file.exists():
        print_error("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(config_file, 'r', encoding='utf-8') as f:
        config_content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º security.py
    security_file = Path("backend/app/core/security.py")
    if not security_file.exists():
        print_error("–§–∞–π–ª security.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(security_file, 'r', encoding='utf-8') as f:
        security_content = f.read()
    
    security_checks = [
        ("SECRET_KEY validation", "validate_secret_key" in config_content),
        ("CORS configuration", "BACKEND_CORS_ORIGINS" in config_content),
        ("Password hashing", "get_password_hash" in security_content),
        ("JWT token validation", "verify_token" in security_content),
        ("Role-based access", "get_current_admin_user" in security_content)
    ]
    
    failed_checks = []
    for check_name, check_result in security_checks:
        if not check_result:
            failed_checks.append(check_name)
    
    if failed_checks:
        print_error(f"–ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {', '.join(failed_checks)}")
        return False
    
    print_success("–ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    return True

def check_documentation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print_header("–ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")
    
    doc_files = [
        "README.md",
        "INSTALLER_README.md",
        "backend/requirements.txt",
        "frontend/package.json"
    ]
    
    missing_docs = []
    for file_path in doc_files:
        if not Path(file_path).exists():
            missing_docs.append(file_path)
    
    if missing_docs:
        print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {', '.join(missing_docs)}")
        return False
    
    print_success("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîß –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ ML COMMUNITY PLATFORM")
    print("=" * 60)
    
    checks = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", check_file_structure),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python", check_python_syntax),
        ("–ò–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_imports_and_dependencies),
        ("–ú–æ–¥–µ–ª–∏ –ë–î", check_database_models),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", check_api_endpoints),
        ("Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", check_frontend_components),
        ("–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫", check_installer),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", check_security),
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", check_documentation)
    ]
    
    results = []
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {name}: {e}")
            results.append((name, False))
    
    print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    
    passed = 0
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print_success("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!")
        return 0
    else:
        print_error(f"‚ö†Ô∏è {total - passed} –ü–†–û–í–ï–†–û–ö –ù–ï –ü–†–û–ô–î–ï–ù–û")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º")
        return 1

if __name__ == "__main__":
    sys.exit(main())