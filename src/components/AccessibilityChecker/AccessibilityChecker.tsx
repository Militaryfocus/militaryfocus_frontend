"use client";

import { useEffect, useState, useCallback } from 'react';

interface AccessibilityIssue {
  type: 'error' | 'warning' | 'info';
  message: string;
  element?: HTMLElement;
  selector?: string;
  rule?: string;
}

interface AccessibilityCheckerProps {
  onIssuesFound?: (issues: AccessibilityIssue[]) => void;
  checkInterval?: number;
  enabled?: boolean;
}

export default function AccessibilityChecker({
  onIssuesFound,
  checkInterval = 5000,
  enabled = true,
}: AccessibilityCheckerProps) {
  const [issues, setIssues] = useState<AccessibilityIssue[]>([]);
  const [isChecking, setIsChecking] = useState(false);

  const checkAccessibility = useCallback(() => {
    if (!enabled) return;

    setIsChecking(true);
    const foundIssues: AccessibilityIssue[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    const headingLevels: number[] = [];
    
    headings.forEach((heading) => {
      const level = parseInt(heading.tagName.charAt(1));
      headingLevels.push(level);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (!heading.textContent?.trim()) {
        foundIssues.push({
          type: 'error',
          message: '–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
          element: heading as HTMLElement,
          selector: heading.tagName.toLowerCase(),
          rule: 'heading-has-content',
        });
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for (let i = 1; i < headingLevels.length; i++) {
      if (headingLevels[i] > headingLevels[i - 1] + 1) {
        foundIssues.push({
          type: 'warning',
          message: '–ù–∞—Ä—É—à–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤',
          rule: 'heading-order',
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const images = document.querySelectorAll('img');
    images.forEach((img) => {
      if (!img.alt) {
        foundIssues.push({
          type: 'error',
          message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ alt-—Ç–µ–∫—Å—Ç–∞',
          element: img as HTMLElement,
          selector: 'img',
          rule: 'img-alt',
        });
      }
      
      if (img.alt === '') {
        foundIssues.push({
          type: 'warning',
          message: '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –ø—É—Å—Ç–æ–π alt',
          element: img as HTMLElement,
          selector: 'img',
          rule: 'img-alt-empty',
        });
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫
    const links = document.querySelectorAll('a');
    links.forEach((link) => {
      if (!link.textContent?.trim() && !link.getAttribute('aria-label')) {
        foundIssues.push({
          type: 'error',
          message: '–°—Å—ã–ª–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞',
          element: link as HTMLElement,
          selector: 'a',
          rule: 'link-has-content',
        });
      }
      
      if (link.href === '#' || link.href === 'javascript:void(0)') {
        foundIssues.push({
          type: 'warning',
          message: '–°—Å—ã–ª–∫–∞-–∑–∞–≥–ª—É—à–∫–∞',
          element: link as HTMLElement,
          selector: 'a',
          rule: 'link-has-href',
        });
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º
    const inputs = document.querySelectorAll('input, textarea, select');
    inputs.forEach((input) => {
      const inputElement = input as HTMLInputElement;
      
      if (inputElement.type !== 'hidden' && !inputElement.id && !inputElement.getAttribute('aria-label')) {
        foundIssues.push({
          type: 'error',
          message: '–ü–æ–ª–µ –≤–≤–æ–¥–∞ –±–µ–∑ –º–µ—Ç–∫–∏',
          element: inputElement,
          selector: input.tagName.toLowerCase(),
          rule: 'form-field-has-label',
        });
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
    const elements = document.querySelectorAll('*');
    elements.forEach((element) => {
      const computedStyle = window.getComputedStyle(element);
      const color = computedStyle.color;
      const backgroundColor = computedStyle.backgroundColor;
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ
      if (color === 'rgb(255, 255, 255)' && backgroundColor === 'rgb(255, 255, 255)') {
        foundIssues.push({
          type: 'warning',
          message: '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å—é',
          element: element as HTMLElement,
          rule: 'color-contrast',
        });
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const focusableElements = document.querySelectorAll(
      'a[href], button, input, textarea, select, [tabindex]:not([tabindex="-1"])'
    );
    
    if (focusableElements.length === 0) {
      foundIssues.push({
        type: 'warning',
        message: '–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏',
        rule: 'keyboard-navigation',
      });
    }

    setIssues(foundIssues);
    onIssuesFound?.(foundIssues);
    setIsChecking(false);
  }, [enabled, onIssuesFound]);

  useEffect(() => {
    if (!enabled) return;

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    checkAccessibility();

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const interval = setInterval(checkAccessibility, checkInterval);

    return () => clearInterval(interval);
  }, [enabled, checkInterval, checkAccessibility]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  const getAccessibilityScore = (issues: AccessibilityIssue[]): number => {
    let score = 100;
    
    issues.forEach(issue => {
      switch (issue.type) {
        case 'error':
          score -= 10;
          break;
        case 'warning':
          score -= 5;
          break;
        case 'info':
          score -= 2;
          break;
      }
    });
    
    return Math.max(0, score);
  };

  const score = getAccessibilityScore(issues);
  const errorCount = issues.filter(i => i.type === 'error').length;
  const warningCount = issues.filter(i => i.type === 'warning').length;

  return (
    <div className="fixed top-4 right-4 bg-gray-900 border border-gray-700 rounded-lg p-3 text-xs text-white z-50 max-w-sm">
      <div className="font-semibold mb-2 flex items-center justify-between">
        <span>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (a11y)</span>
        <button
          onClick={checkAccessibility}
          disabled={isChecking}
          className="text-gray-400 hover:text-white transition-colors disabled:opacity-50"
          title="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"
        >
          {isChecking ? '‚è≥' : 'üîÑ'}
        </button>
      </div>
      
      <div className="space-y-1">
        <div className="flex justify-between">
          <span>–û—Ü–µ–Ω–∫–∞:</span>
          <span className={`font-bold ${
            score >= 90 ? 'text-green-400' :
            score >= 70 ? 'text-yellow-400' : 'text-red-400'
          }`}>
            {score}/100
          </span>
        </div>
        
        <div className="flex justify-between">
          <span>–û—à–∏–±–∫–∏:</span>
          <span className={`font-bold ${
            errorCount === 0 ? 'text-green-400' : 'text-red-400'
          }`}>
            {errorCount}
          </span>
        </div>
        
        <div className="flex justify-between">
          <span>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</span>
          <span className={`font-bold ${
            warningCount === 0 ? 'text-green-400' : 'text-yellow-400'
          }`}>
            {warningCount}
          </span>
        </div>
        
        {issues.length > 0 && (
          <div className="max-h-32 overflow-y-auto mt-2">
            {issues.slice(0, 3).map((issue, index) => (
              <div key={index} className={`text-xs border-l-2 pl-2 mb-1 ${
                issue.type === 'error' ? 'border-red-500 text-red-300' :
                issue.type === 'warning' ? 'border-yellow-500 text-yellow-300' :
                'border-blue-500 text-blue-300'
              }`}>
                <div className="font-medium truncate">{issue.message}</div>
                {issue.rule && (
                  <div className="text-gray-500 text-xs">{issue.rule}</div>
                )}
              </div>
            ))}
            {issues.length > 3 && (
              <div className="text-gray-500 text-center">
                ... –∏ –µ—â–µ {issues.length - 3} –ø—Ä–æ–±–ª–µ–º
              </div>
            )}
          </div>
        )}
        
        {issues.length === 0 && (
          <div className="text-green-400 text-center">
            ‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          </div>
        )}
      </div>
    </div>
  );
}