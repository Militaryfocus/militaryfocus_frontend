#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º
"""
import os
import sys
import subprocess
from pathlib import Path

def check_python_syntax():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤...")
    
    backend_path = Path("backend")
    python_files = list(backend_path.rglob("*.py"))
    
    errors = []
    for file_path in python_files:
        try:
            result = subprocess.run(
                [sys.executable, "-m", "py_compile", str(file_path)],
                capture_output=True,
                text=True
            )
            if result.returncode != 0:
                errors.append(f"{file_path}: {result.stderr}")
        except Exception as e:
            errors.append(f"{file_path}: {e}")
    
    if errors:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:")
        for error in errors:
            print(f"  {error}")
        return False
    else:
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    backend_path = Path("backend")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª–µ–π
    modules_to_check = [
        "app/main.py",
        "app/core/config.py",
        "app/core/database.py",
        "app/core/security.py",
        "app/models/__init__.py",
        "app/schemas/user.py",
        "app/schemas/hero.py",
        "app/schemas/guide.py",
        "app/schemas/news.py",
        "app/crud/user.py",
        "app/crud/hero.py",
        "app/crud/guide.py",
        "app/crud/news.py",
        "app/api/v1/auth.py",
        "app/api/v1/heroes.py",
        "app/api/v1/guides.py",
        "app/api/v1/users.py",
        "app/api/v1/news.py",
        "app/api/v1/search.py"
    ]
    
    missing_files = []
    for module_path in modules_to_check:
        full_path = backend_path / module_path
        if not full_path.exists():
            missing_files.append(module_path)
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –º–æ–¥—É–ª–µ–π:")
        for file_path in missing_files:
            print(f"  {file_path}")
        return False
    else:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –º–æ–¥—É–ª–µ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

def check_frontend_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend...")
    
    frontend_path = Path("frontend")
    package_json = frontend_path / "package.json"
    
    if not package_json.exists():
        print("‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        import json
        with open(package_json, 'r') as f:
            data = json.load(f)
        
        required_deps = [
            "react", "react-dom", "react-router-dom",
            "axios", "react-query", "react-hook-form",
            "react-hot-toast", "framer-motion", "lucide-react"
        ]
        
        missing_deps = []
        for dep in required_deps:
            if dep not in data.get("dependencies", {}):
                missing_deps.append(dep)
        
        if missing_deps:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
            return False
        else:
            print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ frontend –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ package.json: {e}")
        return False

def check_database_models():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–µ–π
        models_file = Path("backend/app/models/__init__.py")
        if not models_file.exists():
            print("‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        with open(models_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_classes = [
            "class User",
            "class Hero", 
            "class BuildGuide",
            "class News",
            "class Comment",
            "class GuideRating"
        ]
        
        missing_classes = []
        for class_name in required_classes:
            if class_name not in content:
                missing_classes.append(class_name)
        
        if missing_classes:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª–∞—Å—Å—ã –º–æ–¥–µ–ª–µ–π: {', '.join(missing_classes)}")
            return False
        
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def check_api_routes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–æ—É—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–æ—É—Ç–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ API —Ä–æ—É—Ç–æ–≤
        api_files = [
            "backend/app/api/v1/auth.py",
            "backend/app/api/v1/heroes.py", 
            "backend/app/api/v1/guides.py",
            "backend/app/api/v1/users.py",
            "backend/app/api/v1/news.py",
            "backend/app/api/v1/search.py"
        ]
        
        missing_files = []
        for file_path in api_files:
            if not Path(file_path).exists():
                missing_files.append(file_path)
        
        if missing_files:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã API: {', '.join(missing_files)}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º main.py
        main_file = Path("backend/app/main.py")
        if not main_file.exists():
            print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ß–∏—Ç–∞–µ–º main.py –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤
        with open(main_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        expected_routes = [
            "@app.get(\"/api/health\")",
            "@app.get(\"/\")",
            "@app.get(\"/api/v1\")",
            "app.include_router(heroes.router",
            "app.include_router(guides.router",
            "app.include_router(users.router",
            "app.include_router(auth.router",
            "app.include_router(search.router",
            "app.include_router(news.router"
        ]
        
        missing_routes = []
        for route in expected_routes:
            if route not in content:
                missing_routes.append(route)
        
        if missing_routes:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–æ—É—Ç—ã –≤ main.py: {', '.join(missing_routes)}")
            return False
        
        print("‚úÖ API —Ä–æ—É—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ä–æ—É—Ç–æ–≤: {e}")
        return False

def check_installer():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞...")
    
    installer_path = Path("installer")
    
    required_files = [
        "app.py",
        "server_setup.py",
        "run_installer.py",
        "requirements.txt",
        "templates/base.html",
        "templates/index.html"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not (installer_path / file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞: {', '.join(missing_files)}")
        return False
    else:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –ø–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º")
    print("=" * 50)
    
    checks = [
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python", check_python_syntax),
        ("–ò–º–ø–æ—Ä—Ç—ã", check_imports),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Frontend", check_frontend_dependencies),
        ("–ú–æ–¥–µ–ª–∏ –ë–î", check_database_models),
        ("API —Ä–æ—É—Ç—ã", check_api_routes),
        ("–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫", check_installer)
    ]
    
    results = []
    for name, check_func in checks:
        print(f"\nüìã {name}:")
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {name}: {e}")
            results.append((name, False))
    
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return 1

if __name__ == "__main__":
    sys.exit(main())