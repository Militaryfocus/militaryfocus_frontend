#!/usr/bin/env python3
"""
–í–µ–±-—É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –¥–ª—è Mobile Legends Community Platform
"""
import os
import sys
import json
import sqlite3
import subprocess
import threading
import time
import shutil
import platform
import psutil
from pathlib import Path
from flask import Flask, render_template, request, jsonify, redirect, url_for, session, flash
import psycopg2
from psycopg2 import sql
import redis
import requests
from server_setup import ServerSetup

app = Flask(__name__)
app.secret_key = 'installer-secret-key-change-in-production'

# –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
PROJECT_ROOT = Path(__file__).parent.parent
BACKEND_PATH = PROJECT_ROOT / "backend"
FRONTEND_PATH = PROJECT_ROOT / "frontend"

class InstallerConfig:
    def __init__(self):
        self.config_file = PROJECT_ROOT / "installer_config.json"
        self.load_config()
    
    def load_config(self):
        if self.config_file.exists():
            with open(self.config_file, 'r', encoding='utf-8') as f:
                self.config = json.load(f)
        else:
            self.config = {
                "database": {},
                "redis": {},
                "admin": {},
                "system": {},
                "completed_steps": []
            }
    
    def save_config(self):
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(self.config, f, indent=2, ensure_ascii=False)
    
    def update_step(self, step, data):
        self.config[step] = data
        if step not in self.config["completed_steps"]:
            self.config["completed_steps"].append(step)
        self.save_config()

config = InstallerConfig()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
installation_status = {
    "running": False,
    "current_step": "",
    "progress": 0,
    "total_steps": 0,
    "logs": [],
    "completed": False,
    "error": None
}

def log_message(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    timestamp = time.strftime("%H:%M:%S")
    log_entry = f"[{timestamp}] {message}"
    installation_status["logs"].append(log_entry)
    print(log_entry)

def run_installation():
    """–ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global installation_status
    
    try:
        installation_status["running"] = True
        installation_status["completed"] = False
        installation_status["error"] = None
        installation_status["logs"] = []
        
        log_message("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ServerSetup
        server_setup = ServerSetup(config.config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        results = server_setup.run_full_setup()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        successful_steps = sum(1 for success in results.values() if success)
        total_steps = len(results)
        
        installation_status["progress"] = 100
        installation_status["running"] = False
        
        if successful_steps == total_steps:
            installation_status["completed"] = True
            log_message("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            installation_status["error"] = f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏: {successful_steps}/{total_steps} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
            log_message(f"‚ö†Ô∏è {installation_status['error']}")
            
    except Exception as e:
        installation_status["running"] = False
        installation_status["error"] = str(e)
        log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞"""
    return render_template('index.html', 
                         completed_steps=config.config["completed_steps"],
                         total_steps=6)

@app.route('/step/<int:step>')
def step(step):
    """–°—Ç—Ä–∞–Ω–∏—Ü—ã —à–∞–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    if step == 1:
        return render_template('step1_requirements.html')
    elif step == 2:
        return render_template('step2_database.html')
    elif step == 3:
        return render_template('step3_redis.html')
    elif step == 4:
        return render_template('step4_admin.html')
    elif step == 5:
        return render_template('step5_import.html')
    elif step == 6:
        return render_template('step6_complete.html')
    else:
        return redirect(url_for('index'))

@app.route('/api/check-requirements', methods=['POST'])
def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    requirements = {
        "python": check_python_version(),
        "pip": check_pip(),
        "node": check_node(),
        "npm": check_npm(),
        "postgresql": check_postgresql(),
        "redis": check_redis(),
        "disk_space": check_disk_space(),
        "memory": check_memory(),
        "git": check_git(),
        "curl": check_curl()
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    critical_components = ["python", "pip", "node", "npm", "disk_space", "memory"]
    critical_passed = all(requirements[comp]["installed"] for comp in critical_components)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    all_passed = all(req["installed"] for req in requirements.values())
    
    if critical_passed:
        config.update_step("system", requirements)
    
    return jsonify({
        "success": critical_passed,
        "all_passed": all_passed,
        "requirements": requirements,
        "critical_components": critical_components,
        "system_info": {
            "platform": platform.system(),
            "platform_version": platform.version(),
            "architecture": platform.machine(),
            "processor": platform.processor(),
            "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
            "total_memory": f"{psutil.virtual_memory().total / (1024**3):.1f} GB",
            "disk_usage": f"{shutil.disk_usage('/').free / (1024**3):.1f} GB —Å–≤–æ–±–æ–¥–Ω–æ"
        }
    })

@app.route('/api/test-database', methods=['POST'])
def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    data = request.json
    host = data.get('host', 'localhost')
    port = data.get('port', 5432)
    database = data.get('database', 'ml_community')
    username = data.get('username', 'ml_user')
    password = data.get('password', 'ml_password')
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        conn = psycopg2.connect(
            host=host,
            port=port,
            database=database,
            user=username,
            password=password
        )
        conn.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config.update_step("database", {
            "host": host,
            "port": port,
            "database": database,
            "username": username,
            "password": password
        })
        
        return jsonify({"success": True, "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!"})
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"})

@app.route('/api/test-redis', methods=['POST'])
def test_redis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    data = request.json
    host = data.get('host', 'localhost')
    port = data.get('port', 6379)
    password = data.get('password', '')
    
    try:
        r = redis.Redis(host=host, port=port, password=password if password else None)
        r.ping()
        
        config.update_step("redis", {
            "host": host,
            "port": port,
            "password": password
        })
        
        return jsonify({"success": True, "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ!"})
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"})

@app.route('/api/create-admin', methods=['POST'])
def create_admin():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    data = request.json
    username = data.get('username')
    email = data.get('email')
    password = data.get('password')
    
    if not all([username, email, password]):
        return jsonify({"success": False, "message": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
    
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config.update_step("admin", {
            "username": username,
            "email": email,
            "password": password  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å
        })
        
        return jsonify({"success": True, "message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"})
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}"})

@app.route('/api/run-migrations', methods=['POST'])
def run_migrations():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ Alembic –º–∏–≥—Ä–∞—Ü–∏–π
        # –ü–æ–∫–∞ —á—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
        return jsonify({"success": True, "message": "–ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"})
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {str(e)}"})

@app.route('/api/import-data', methods=['POST'])
def import_data():
    """–ò–º–ø–æ—Ä—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç –≥–µ—Ä–æ–µ–≤, –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —Ç.–¥.
        return jsonify({"success": True, "message": "–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!"})
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}"})

@app.route('/api/generate-config', methods=['POST'])
def generate_config():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º .env —Ñ–∞–π–ª –¥–ª—è backend
        generate_backend_env()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è frontend
        generate_frontend_config()
        
        return jsonify({"success": True, "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã!"})
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"})

@app.route('/api/start-installation', methods=['POST'])
def start_installation():
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    global installation_status
    
    if installation_status["running"]:
        return jsonify({"success": False, "message": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"})
    
    if installation_status["completed"]:
        return jsonify({"success": False, "message": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"})
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_installation)
        thread.daemon = True
        thread.start()
        
        return jsonify({"success": True, "message": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞"})
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"})

@app.route('/api/installation-status')
def get_installation_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    return jsonify(installation_status)

@app.route('/api/check-services', methods=['POST'])
def check_services():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        services = {
            "postgresql": check_service_status("postgresql"),
            "redis": check_service_status("redis-server"),
            "nginx": check_service_status("nginx"),
            "backend": check_service_status("ml-community-backend")
        }
        
        all_running = all(services.values())
        
        return jsonify({
            "success": all_running,
            "services": services,
            "message": "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã" if all_running else "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
        })
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}"})

@app.route('/api/restart-services', methods=['POST'])
def restart_services():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        services = ["postgresql", "redis-server", "nginx", "ml-community-backend"]
        
        for service in services:
            subprocess.run(f"systemctl restart {service}", shell=True, check=True)
        
        return jsonify({"success": True, "message": "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"})
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}"})

@app.route('/api/install-missing-dependencies', methods=['POST'])
def install_missing_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        data = request.json
        dependencies = data.get('dependencies', [])
        
        results = {}
        
        for dep in dependencies:
            if dep == 'node':
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js —á–µ—Ä–µ–∑ NodeSource
                subprocess.run([
                    'curl', '-fsSL', 'https://deb.nodesource.com/setup_18.x', '|', 'sudo', '-E', 'bash', '-'
                ], shell=True, check=True)
                subprocess.run(['apt', 'install', '-y', 'nodejs'], check=True)
                results[dep] = True
                
            elif dep == 'postgresql':
                subprocess.run(['apt', 'update'], check=True)
                subprocess.run(['apt', 'install', '-y', 'postgresql', 'postgresql-contrib'], check=True)
                subprocess.run(['systemctl', 'start', 'postgresql'], check=True)
                subprocess.run(['systemctl', 'enable', 'postgresql'], check=True)
                results[dep] = True
                
            elif dep == 'redis':
                subprocess.run(['apt', 'install', '-y', 'redis-server'], check=True)
                subprocess.run(['systemctl', 'start', 'redis-server'], check=True)
                subprocess.run(['systemctl', 'enable', 'redis-server'], check=True)
                results[dep] = True
                
            elif dep == 'git':
                subprocess.run(['apt', 'install', '-y', 'git'], check=True)
                results[dep] = True
                
            elif dep == 'curl':
                subprocess.run(['apt', 'install', '-y', 'curl'], check=True)
                results[dep] = True
        
        return jsonify({
            "success": True,
            "message": "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
            "results": results
        })
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {str(e)}"})

@app.route('/api/validate-config', methods=['POST'])
def validate_config():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        data = request.json
        step = data.get('step')
        
        if step == 'database':
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            host = data.get('host', 'localhost')
            port = data.get('port', 5432)
            database = data.get('database', 'ml_community')
            username = data.get('username', 'ml_user')
            password = data.get('password', '')
            
            if not all([host, database, username]):
                return jsonify({"success": False, "message": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
            
            if not (1 <= port <= 65535):
                return jsonify({"success": False, "message": "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535"})
            
            if len(password) < 6:
                return jsonify({"success": False, "message": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"})
            
            return jsonify({"success": True, "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"})
            
        elif step == 'admin':
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            username = data.get('username', '')
            email = data.get('email', '')
            password = data.get('password', '')
            
            if not username or len(username) < 3:
                return jsonify({"success": False, "message": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"})
            
            if not email or '@' not in email:
                return jsonify({"success": False, "message": "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"})
            
            if not password or len(password) < 6:
                return jsonify({"success": False, "message": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"})
            
            return jsonify({"success": True, "message": "–î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∞–ª–∏–¥–Ω—ã"})
        
        return jsonify({"success": True, "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"})
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"})

@app.route('/api/get-installation-logs')
def get_installation_logs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    return jsonify({
        "logs": installation_status.get("logs", []),
        "running": installation_status.get("running", False),
        "completed": installation_status.get("completed", False),
        "error": installation_status.get("error", None)
    })

@app.route('/api/check-port', methods=['POST'])
def check_port():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    try:
        data = request.json
        port = data.get('port', 8001)
        
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', port))
        sock.close()
        
        is_available = result != 0
        
        return jsonify({
            "success": True,
            "available": is_available,
            "port": port,
            "message": "–ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω" if is_available else "–ü–æ—Ä—Ç –∑–∞–Ω—è—Ç"
        })
    
    except Exception as e:
        return jsonify({"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {str(e)}"})

def check_service_status(service_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        result = subprocess.run(
            f"systemctl is-active {service_name}", 
            shell=True, 
            capture_output=True, 
            text=True
        )
        return result.stdout.strip() == "active"
    except:
        return False

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    return {
        "installed": version >= (3, 8),
        "version": f"{version.major}.{version.minor}.{version.micro}",
        "required": "3.8+",
        "status": "‚úÖ" if version >= (3, 8) else "‚ùå"
    }

def check_pip():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è pip"""
    try:
        import pip
        version = pip.__version__
        return {
            "installed": True,
            "version": version,
            "required": "–ª—é–±–∞—è",
            "status": "‚úÖ"
        }
    except ImportError:
        return {
            "installed": False,
            "version": "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "required": "–ª—é–±–∞—è",
            "status": "‚ùå"
        }

def check_node():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Node.js"""
    try:
        result = subprocess.run(['node', '--version'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            version = result.stdout.strip().replace('v', '')
            major_version = int(version.split('.')[0])
            return {
                "installed": True,
                "version": version,
                "required": "16+",
                "status": "‚úÖ" if major_version >= 16 else "‚ö†Ô∏è"
            }
        else:
            return {
                "installed": False,
                "version": "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "required": "16+",
                "status": "‚ùå"
            }
    except Exception as e:
        return {
            "installed": False,
            "version": f"–æ—à–∏–±–∫–∞: {str(e)}",
            "required": "16+",
            "status": "‚ùå"
        }

def check_npm():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è npm"""
    try:
        result = subprocess.run(['npm', '--version'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            version = result.stdout.strip()
            major_version = int(version.split('.')[0])
            return {
                "installed": True,
                "version": version,
                "required": "8+",
                "status": "‚úÖ" if major_version >= 8 else "‚ö†Ô∏è"
            }
        else:
            return {
                "installed": False,
                "version": "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "required": "8+",
                "status": "‚ùå"
            }
    except Exception as e:
        return {
            "installed": False,
            "version": f"–æ—à–∏–±–∫–∞: {str(e)}",
            "required": "8+",
            "status": "‚ùå"
        }

def check_postgresql():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PostgreSQL"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        test_configs = [
            {'host': 'localhost', 'port': 5432, 'database': 'postgres', 'user': 'postgres', 'password': 'postgres'},
            {'host': 'localhost', 'port': 5432, 'database': 'postgres', 'user': 'postgres', 'password': ''},
            {'host': 'localhost', 'port': 5432, 'database': 'postgres', 'user': 'postgres', 'password': 'admin'},
        ]
        
        for config in test_configs:
            try:
                conn = psycopg2.connect(**config)
                conn.close()
                return {
                    "installed": True,
                    "version": "–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "required": "12+",
                    "status": "‚úÖ"
                }
            except:
                continue
        
        return {
            "installed": False,
            "version": "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "required": "12+",
            "status": "‚ùå"
        }
    except Exception as e:
        return {
            "installed": False,
            "version": f"–æ—à–∏–±–∫–∞: {str(e)}",
            "required": "12+",
            "status": "‚ùå"
        }

def check_redis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis"""
    try:
        r = redis.Redis(host='localhost', port=6379, socket_timeout=5)
        r.ping()
        return {
            "installed": True,
            "version": "–¥–æ—Å—Ç—É–ø–µ–Ω",
            "required": "6+",
            "status": "‚úÖ"
        }
    except Exception as e:
        return {
            "installed": False,
            "version": f"–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}",
            "required": "6+",
            "status": "‚ùå"
        }

def check_disk_space():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
    try:
        free_space = shutil.disk_usage('/').free
        free_gb = free_space / (1024**3)
        required_gb = 1
        
        return {
            "installed": free_gb >= required_gb,
            "version": f"{free_gb:.1f} GB —Å–≤–æ–±–æ–¥–Ω–æ",
            "required": f"{required_gb} GB",
            "status": "‚úÖ" if free_gb >= required_gb else "‚ùå"
        }
    except Exception as e:
        return {
            "installed": False,
            "version": f"–æ—à–∏–±–∫–∞: {str(e)}",
            "required": "1 GB",
            "status": "‚ùå"
        }

def check_memory():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    try:
        memory = psutil.virtual_memory()
        available_gb = memory.available / (1024**3)
        required_gb = 1
        
        return {
            "installed": available_gb >= required_gb,
            "version": f"{available_gb:.1f} GB –¥–æ—Å—Ç—É–ø–Ω–æ",
            "required": f"{required_gb} GB",
            "status": "‚úÖ" if available_gb >= required_gb else "‚ùå"
        }
    except Exception as e:
        return {
            "installed": False,
            "version": f"–æ—à–∏–±–∫–∞: {str(e)}",
            "required": "1 GB",
            "status": "‚ùå"
        }

def check_git():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Git"""
    try:
        result = subprocess.run(['git', '--version'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            version = result.stdout.strip()
            return {
                "installed": True,
                "version": version,
                "required": "–ª—é–±–∞—è",
                "status": "‚úÖ"
            }
        else:
            return {
                "installed": False,
                "version": "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "required": "–ª—é–±–∞—è",
                "status": "‚ùå"
            }
    except Exception as e:
        return {
            "installed": False,
            "version": f"–æ—à–∏–±–∫–∞: {str(e)}",
            "required": "–ª—é–±–∞—è",
            "status": "‚ùå"
        }

def check_curl():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è curl"""
    try:
        result = subprocess.run(['curl', '--version'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            version = result.stdout.split('\n')[0]
            return {
                "installed": True,
                "version": version,
                "required": "–ª—é–±–∞—è",
                "status": "‚úÖ"
            }
        else:
            return {
                "installed": False,
                "version": "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "required": "–ª—é–±–∞—è",
                "status": "‚ùå"
            }
    except Exception as e:
        return {
            "installed": False,
            "version": f"–æ—à–∏–±–∫–∞: {str(e)}",
            "required": "–ª—é–±–∞—è",
            "status": "‚ùå"
        }

def generate_backend_env():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è .env —Ñ–∞–π–ª–∞ –¥–ª—è backend"""
    db_config = config.config.get("database", {})
    redis_config = config.config.get("redis", {})
    
    env_content = f"""# Database
DATABASE_URL=postgresql://{db_config.get('username', 'ml_user')}:{db_config.get('password', 'ml_password')}@{db_config.get('host', 'localhost')}:{db_config.get('port', 5432)}/{db_config.get('database', 'ml_community')}

# Redis
REDIS_URL=redis://{redis_config.get('host', 'localhost')}:{redis_config.get('port', 6379)}

# Security
SECRET_KEY=your-secret-key-change-in-production-please-use-a-strong-key
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# CORS
BACKEND_CORS_ORIGINS=["http://localhost:3000", "http://localhost:8001", "http://127.0.0.1:3000", "http://127.0.0.1:8001"]

# File Upload
MAX_FILE_SIZE=10485760
UPLOAD_DIRECTORY=/app/static/uploads

# API
API_V1_STR=/api/v1
PROJECT_NAME=Mobile Legends Community Platform

# Email
SMTP_TLS=True
SMTP_PORT=587
SMTP_HOST=smtp.gmail.com
SMTP_USER=
SMTP_PASSWORD=

# External APIs
ML_OFFICIAL_API_URL=https://api.mobilelegends.com
ML_OFFICIAL_API_KEY=

# Environment
ENVIRONMENT=production
DEBUG=False
"""
    
    env_file = BACKEND_PATH / ".env"
    with open(env_file, 'w', encoding='utf-8') as f:
        f.write(env_content)

def generate_frontend_config():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è frontend"""
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è frontend
    env_content = """REACT_APP_API_URL=http://localhost:8001/api/v1
REACT_APP_VERSION=1.0.0
REACT_APP_NAME=Mobile Legends Community
"""
    
    env_file = FRONTEND_PATH / ".env"
    with open(env_file, 'w', encoding='utf-8') as f:
        f.write(env_content)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)