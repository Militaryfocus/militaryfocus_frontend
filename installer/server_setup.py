#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
"""
import os
import sys
import subprocess
import shutil
import json
import time
from pathlib import Path
import psutil
import requests

class ServerSetup:
    def __init__(self, config):
        self.config = config
        self.project_root = Path(__file__).parent.parent
        self.backend_path = self.project_root / "backend"
        self.frontend_path = self.project_root / "frontend"
        self.installer_path = self.project_root / "installer"
        
    def install_system_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
        self.run_command("apt update -y")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        packages = [
            "python3", "python3-pip", "python3-venv", "python3-dev",
            "postgresql", "postgresql-contrib", "redis-server",
            "nginx", "certbot", "python3-certbot-nginx",
            "git", "curl", "wget", "unzip", "build-essential",
            "nodejs", "npm", "supervisor"
        ]
        
        for package in packages:
            try:
                self.run_command(f"apt install -y {package}")
                print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")
                return False
        
        return True
    
    def setup_postgresql(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL"""
        print("üêò –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL...")
        
        db_config = self.config.get("database", {})
        db_name = db_config.get("database", "ml_community")
        db_user = db_config.get("username", "ml_user")
        db_password = db_config.get("password", "ml_password")
        
        try:
            # –ó–∞–ø—É—Å–∫ PostgreSQL
            self.run_command("systemctl start postgresql")
            self.run_command("systemctl enable postgresql")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            commands = [
                f"sudo -u postgres psql -c \"CREATE USER {db_user} WITH PASSWORD '{db_password}';\"",
                f"sudo -u postgres psql -c \"CREATE DATABASE {db_name} OWNER {db_user};\"",
                f"sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE {db_name} TO {db_user};\"",
                f"sudo -u postgres psql -c \"ALTER USER {db_user} CREATEDB;\""
            ]
            
            for cmd in commands:
                self.run_command(cmd)
            
            print("‚úÖ PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL: {e}")
            return False
    
    def setup_redis(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis"""
        print("üî¥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis...")
        
        try:
            # –ó–∞–ø—É—Å–∫ Redis
            self.run_command("systemctl start redis-server")
            self.run_command("systemctl enable redis-server")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å)
            redis_config = self.config.get("redis", {})
            if redis_config.get("password"):
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è Redis
                redis_conf = "/etc/redis/redis.conf"
                with open(redis_conf, "a") as f:
                    f.write(f"\nrequirepass {redis_config['password']}\n")
                
                self.run_command("systemctl restart redis-server")
            
            print("‚úÖ Redis –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Redis: {e}")
            return False
    
    def install_python_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            venv_path = self.backend_path / "venv"
            if not venv_path.exists():
                self.run_command(f"python3 -m venv {venv_path}")
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            pip_path = venv_path / "bin" / "pip"
            requirements_path = self.backend_path / "requirements.txt"
            
            self.run_command(f"{pip_path} install --upgrade pip")
            self.run_command(f"{pip_path} install -r {requirements_path}")
            
            print("‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False
    
    def install_node_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend
            self.run_command(f"cd {self.frontend_path} && npm install")
            
            # –°–±–æ—Ä–∫–∞ frontend
            self.run_command(f"cd {self.frontend_path} && npm run build")
            
            print("‚úÖ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False
    
    def run_database_migrations(self):
        """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            venv_python = self.backend_path / "venv" / "bin" / "python"
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Alembic
            self.run_command(f"cd {self.backend_path} && {venv_python} -m alembic upgrade head")
            
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False
    
    def create_admin_user(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            admin_config = self.config.get("admin", {})
            venv_python = self.backend_path / "venv" / "bin" / "python"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            create_admin_script = self.backend_path / "create_admin.py"
            script_content = f'''
import sys
sys.path.append('{self.backend_path}')
from app.core.database import SessionLocal
from app.models import User
from app.core.security import get_password_hash

def create_admin():
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        existing_admin = db.query(User).filter(User.username == "{admin_config.get('username', 'admin')}").first()
        if existing_admin:
            print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin = User(
            username="{admin_config.get('username', 'admin')}",
            email="{admin_config.get('email', 'admin@example.com')}",
            hashed_password=get_password_hash("{admin_config.get('password', 'admin123')}"),
            ign="{admin_config.get('ign', '')}",
            current_rank="{admin_config.get('current_rank', '')}",
            role="Admin",
            is_active=True,
            is_verified=True
        )
        
        db.add(admin)
        db.commit()
        print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {{e}}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    create_admin()
'''
            
            with open(create_admin_script, 'w') as f:
                f.write(script_content)
            
            # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
            self.run_command(f"cd {self.backend_path} && {venv_python} create_admin.py")
            
            print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    def setup_nginx(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx"""
        print("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx...")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
            nginx_config = f'''
server {{
    listen 80;
    server_name {self.config.get('domain', 'localhost')};
    
    # Frontend
    location / {{
        root {self.frontend_path}/build;
        index index.html;
        try_files $uri $uri/ /index.html;
    }}
    
    # Backend API
    location /api/ {{
        proxy_pass http://127.0.0.1:8001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }}
    
    # Static files
    location /static/ {{
        alias {self.backend_path}/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }}
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
}}
'''
            
            # –ó–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            with open("/etc/nginx/sites-available/ml-community", "w") as f:
                f.write(nginx_config)
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∞–π—Ç–∞
            self.run_command("ln -sf /etc/nginx/sites-available/ml-community /etc/nginx/sites-enabled/")
            self.run_command("rm -f /etc/nginx/sites-enabled/default")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            self.run_command("nginx -t")
            self.run_command("systemctl restart nginx")
            self.run_command("systemctl enable nginx")
            
            print("‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Nginx: {e}")
            return False
    
    def setup_systemd_services(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            # Backend —Å–µ—Ä–≤–∏—Å
            backend_service = f'''
[Unit]
Description=ML Community Backend
After=network.target postgresql.service redis.service

[Service]
Type=simple
User=www-data
WorkingDirectory={self.backend_path}
Environment=PATH={self.backend_path}/venv/bin
ExecStart={self.backend_path}/venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8001
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
'''
            
            with open("/etc/systemd/system/ml-community-backend.service", "w") as f:
                f.write(backend_service)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
            self.run_command("systemctl daemon-reload")
            self.run_command("systemctl enable ml-community-backend")
            self.run_command("systemctl start ml-community-backend")
            
            print("‚úÖ Systemd —Å–µ—Ä–≤–∏—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ systemd —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def setup_ssl(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
        print("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
        
        domain = self.config.get('domain')
        if not domain or domain == 'localhost':
            print("‚ö†Ô∏è SSL –ø—Ä–æ–ø—É—â–µ–Ω (localhost)")
            return True
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            self.run_command(f"certbot --nginx -d {domain} --non-interactive --agree-tos --email admin@{domain}")
            
            print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL: {e}")
            return False
    
    def import_initial_data(self):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üìä –ò–º–ø–æ—Ä—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            venv_python = self.backend_path / "venv" / "bin" / "python"
            
            # –ò–º–ø–æ—Ä—Ç –≥–µ—Ä–æ–µ–≤
            import_script = self.backend_path / "import_data.py"
            script_content = '''
import sys
sys.path.append('.')
from app.core.database import SessionLocal
from app.models import Hero, Item, Emblem
import json

def import_heroes():
    """–ò–º–ø–æ—Ä—Ç –≥–µ—Ä–æ–µ–≤ Mobile Legends"""
    db = SessionLocal()
    try:
        # –ü—Ä–∏–º–µ—Ä—ã –≥–µ—Ä–æ–µ–≤
        heroes_data = [
            {
                "name": "Layla",
                "role": "Marksman",
                "specialty": "Reap/Burst",
                "lane": ["Gold"],
                "durability": 2,
                "offense": 8,
                "control": 2,
                "difficulty": 1,
                "win_rate": 50.5,
                "pick_rate": 15.2,
                "ban_rate": 0.1
            },
            {
                "name": "Tigreal",
                "role": "Tank",
                "specialty": "Initiator/Guardian",
                "lane": ["Roam"],
                "durability": 9,
                "offense": 3,
                "control": 8,
                "difficulty": 2,
                "win_rate": 48.3,
                "pick_rate": 8.7,
                "ban_rate": 2.1
            },
            {
                "name": "Eudora",
                "role": "Mage",
                "specialty": "Burst",
                "lane": ["Mid"],
                "durability": 3,
                "offense": 8,
                "control": 6,
                "difficulty": 2,
                "win_rate": 49.8,
                "pick_rate": 12.4,
                "ban_rate": 0.5
            }
        ]
        
        for hero_data in heroes_data:
            existing = db.query(Hero).filter(Hero.name == hero_data["name"]).first()
            if not existing:
                hero = Hero(**hero_data)
                db.add(hero)
        
        db.commit()
        print(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(heroes_data)} –≥–µ—Ä–æ–µ–≤")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≥–µ—Ä–æ–µ–≤: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    import_heroes()
'''
            
            with open(import_script, 'w') as f:
                f.write(script_content)
            
            self.run_command(f"cd {self.backend_path} && {venv_python} import_data.py")
            
            print("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def run_command(self, command):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            result = subprocess.run(
                command, 
                shell=True, 
                check=True, 
                capture_output=True, 
                text=True
            )
            return result.stdout
        except subprocess.CalledProcessError as e:
            raise Exception(f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e.stderr}")
    
    def setup_firewall(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"""
        print("üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞...")
        
        try:
            # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ—Ä—Ç–æ–≤
            ports = ["22", "80", "443", "8001"]
            
            for port in ports:
                self.run_command(f"ufw allow {port}")
            
            # –í–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π—Ä–≤–æ–ª–∞
            self.run_command("ufw --force enable")
            
            print("‚úÖ –§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞: {e}")
            return False
    
    def create_monitoring_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        try:
            monitoring_script = "/usr/local/bin/ml-community-monitor.sh"
            script_content = '''#!/bin/bash

# ML Community Monitoring Script
echo "=== ML Community Status ==="
echo "Date: $(date)"
echo

# Backend service
echo "Backend Service:"
systemctl is-active ml-community-backend
echo

# Database
echo "PostgreSQL:"
systemctl is-active postgresql
echo

# Redis
echo "Redis:"
systemctl is-active redis-server
echo

# Nginx
echo "Nginx:"
systemctl is-active nginx
echo

# Disk usage
echo "Disk Usage:"
df -h /
echo

# Memory usage
echo "Memory Usage:"
free -h
echo

# Backend logs (last 10 lines)
echo "Backend Logs (last 10 lines):"
journalctl -u ml-community-backend -n 10 --no-pager
'''
            
            with open(monitoring_script, 'w') as f:
                f.write(script_content)
            
            self.run_command(f"chmod +x {monitoring_script}")
            
            print("‚úÖ –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    def run_full_setup(self):
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞...")
        
        steps = [
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_system_dependencies),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL", self.setup_postgresql),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis", self.setup_redis),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_python_dependencies),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_node_dependencies),
            ("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π", self.run_database_migrations),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", self.create_admin_user),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx", self.setup_nginx),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤", self.setup_systemd_services),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞", self.setup_firewall),
            ("–ò–º–ø–æ—Ä—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", self.import_initial_data),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", self.create_monitoring_script),
        ]
        
        # SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–æ–º–µ–Ω
        if self.config.get('domain') and self.config.get('domain') != 'localhost':
            steps.append(("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL", self.setup_ssl))
        
        results = {}
        
        for step_name, step_func in steps:
            print(f"\n{'='*50}")
            print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {step_name}")
            print(f"{'='*50}")
            
            try:
                success = step_func()
                results[step_name] = success
                
                if success:
                    print(f"‚úÖ {step_name} - –£–°–ü–ï–®–ù–û")
                else:
                    print(f"‚ùå {step_name} - –û–®–ò–ë–ö–ê")
                    
            except Exception as e:
                print(f"‚ùå {step_name} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
                results[step_name] = False
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\n{'='*50}")
        print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print(f"{'='*50}")
        
        successful = sum(1 for success in results.values() if success)
        total = len(results)
        
        for step_name, success in results.items():
            status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"{step_name}: {status}")
        
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{total} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        if successful == total:
            print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{self.config.get('domain', 'localhost')}")
            print("üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: /usr/local/bin/ml-community-monitor.sh")
        else:
            print("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        
        return results